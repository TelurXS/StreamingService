@using Application.Features.Titles
@using Application.Features.Users
@using Domain.Entities
@using Domain.Extensions
@using Domain.Models.Responses
@using Infrastructure.Configurations

@inject ITitleService TitleService

<ModalWindow @ref="Window">
	<div class="gradient-panel dashboard-form p-4 d-flex flex-column" @onclick:stopPropagation="true" style="max-height: 90vh">
		<h2>Create Title</h2>

		<div class="h-100" style="overflow-y: auto; overflow-x: hidden; padding-right: 10px;">


			<EditForm Model="Input">
				<DataAnnotationsValidator />
				<ValidationSummary />

				@if (Errors.Count > 0)
				{
					<ul>
						@foreach (var error in Errors)
						{
							<li class="text-danger">@error</li>
						}
					</ul>
				}

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Name</span>
					</div>
					<div class="col-md-9">
						<InputText @bind-Value="Input.Name" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Name" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Description</span>
					</div>
					<div class="col-md-9">
						<InputTextArea @bind-Value="Input.Description" rows="4" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Description" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Slug</span>
					</div>
					<div class="col-md-9">
						<InputText @bind-Value="Input.Slug" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Slug" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">AvarageRate</span>
					</div>
					<div class="col-md-9">
						<InputNumber @bind-Value="Input.AvarageRate" min="0" max="10" step="0.1" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.AvarageRate" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">ReleaseDate</span>
					</div>
					<div class="col-md-9">
						<InputDate @bind-Value="Input.ReleaseDate" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.ReleaseDate" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Type</span>
					</div>
					<div class="col-md-9">
						<InputSelect @bind-Value="Input.Type" class="input font-md font-gray">
							@foreach (var value in Enum.GetValues(typeof(TitleType)))
							{
								<option value="@value">@value</option>
							}
						</InputSelect>
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Type" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Country</span>
					</div>
					<div class="col-md-9">
						<InputSelect @bind-Value="Input.Country" class="input font-md font-gray">
							@foreach (Country value in Enum.GetValues(typeof(Country)))
							{
								<option value="@value">@value.GetDescription()</option>
							}
						</InputSelect>
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Country" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Age Restriction</span>
					</div>
					<div class="col-md-9">
						<InputSelect @bind-Value="Input.AgeRestriction" class="input font-md font-gray">
							@foreach (AgeRestriction value in Enum.GetValues(typeof(AgeRestriction)))
							{
								<option value="@value">@value (@value.GetDescription())</option>
							}
						</InputSelect>
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.AgeRestriction" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Director</span>
					</div>
					<div class="col-md-9">
						<InputText @bind-Value="Input.Director" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Director" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Cast</span>
					</div>
					<div class="col-md-9">
						<InputText @bind-Value="Input.Cast" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Cast" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Views</span>
					</div>
					<div class="col-md-9">
						<InputNumber @bind-Value="Input.Views" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Views" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Trailer</span>
					</div>
					<div class="col-md-9">
						<InputText @bind-Value="Input.Trailer" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Trailer" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Image</span>
					</div>
					<div class="col-md-9">
						<InputFile OnChange="(args) => Input.Image = args.File" class="input font-md font-gray" />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Image" />
					</div>
				</div>

				<div class="row mt-3">
					<div class="col-md-3 my-auto">
						<span class="font-md">Screenshots</span>
					</div>
					<div class="col-md-9">
						<InputFile OnChange="(args) => Input.Screenshots = args.GetMultipleFiles().ToList()" class="input font-md font-gray" multiple />
					</div>

					<div class="col-md-12 mt-2">
						<ValidationMessage For="() => Input.Screenshots" />
					</div>
				</div>

				<div class="mt-3 d-flex">
					<button @onclick="() => Save()" class="mx-1 button button-fit p-2">Save</button>
					<button @onclick="() => Close()" class="mx-1 button-glass button-fit p-2">Cancel</button>
				</div>
			</EditForm>

		</div>
	</div>
</ModalWindow>

@code {

	[Parameter]
	public Func<Task> OnChanged { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	private ModalWindow Window { get; set; } = default!;

	private List<string> Errors { get; set; } = [];

	public void Open() => Window.Open();

	public void Close() => Window.Close();

	private async Task Save()
	{
		Errors = [];
		StateHasChanged();

		var request = new CreateTitle.Request
			{
				Name = Input.Name,
				Description = Input.Description,
				Slug = Input.Slug,
				AvarageRate = Input.AvarageRate,
				ReleaseDate = Input.ReleaseDate,
				Type = Input.Type,
				Country = Input.Country,
				AgeRestriction = Input.AgeRestriction,
				Director = Input.Director,
				Cast = Input.Cast,
				Views = Input.Views,
				Trailer = Input.Trailer,
			};

		var result = await TitleService.CreateAsync(request);

		if (result.IsCreated)
		{
			var title = result.AsCreated;

			if (Input.Image is not null)
				await TitleService.UploadImageAsync(title.Id, Input.Image);

			if (Input.Screenshots is not null && Input.Screenshots.Count > 0)
				await TitleService.UploadScreenshotAsync(title.Id, Input.Screenshots);

			OnChanged?.Invoke();
			Close();
		}

		if (result.IsValidationFailed)
		{
			Errors = result.AsValidationFailed.Errors.Select(x => x.ErrorMessage).ToList();
			StateHasChanged();
		}

		if (result.IsFailed)
		{
			Errors = ["Something went wrong while processing your request"];
			StateHasChanged();
		}
	}

	private class InputModel
	{
		public string Name { get; set; } = string.Empty;

		public string Description { get; set; } = string.Empty;

		public string Slug { get; set; } = string.Empty;

		public float AvarageRate { get; set; } = default;

		public DateTime ReleaseDate { get; set; } = DateTime.Now;

		public TitleType Type { get; set; } = default;

		public Country Country { get; set; } = default;

		public AgeRestriction AgeRestriction { get; set; } = default;

		public string Director { get; set; } = string.Empty;

		public string Cast { get; set; } = string.Empty;

		public int Views { get; set; } = default;

		public string Trailer { get; set; } = string.Empty;

		public IBrowserFile Image { get; set; } = default!;

		public List<IBrowserFile> Screenshots { get; set; } = default!;
	}
}
