@page "/register"

<h3>Register</h3>

@inject UserManager<User> UserManager
@inject SignInManager<User> SignInManager
@inject NavigationManager NavigationManager
@inject IUserStore<User> UserStore
@inject IEmailSender<User> EmailSender
@inject IUserEmailStore<User> UserEmailStore

<EditForm Model="Input" OnValidSubmit="OnValidSubmit" FormName="login">
    <InputText @bind-Value="Input.Username"></InputText>
    <InputText @bind-Value="Input.Email"></InputText>
    <InputText @bind-Value="Input.Password"></InputText>
    <button type="submit">Sign In</button>
</EditForm>

@code {

    private InputModel Input { get; set; }

    private async Task OnValidSubmit()
    {
        var user = new User();

        await UserStore.SetUserNameAsync(user, Input.Username, CancellationToken.None);
        await UserEmailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        var result = await UserManager.CreateAsync(user, Input.Password);

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = nameof(Username))]
        public string Username { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        [Display(Name = nameof(Email))]
        public string Email { get; set; } = string.Empty;

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = nameof(Password))]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = nameof(ConfirmPassword))]
        [Compare(nameof(Password), ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
