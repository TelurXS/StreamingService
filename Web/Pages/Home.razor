@page "/"
@using Domain.Entities

@inject ITitleService TitleService;

<PageTitle>Home</PageTitle>
<Background Blur="0" Url="@Title.Image?.Uri" />

@if (Loaded is false)
{
	<span>Loading...</span>
	<div class="page-container"></div>
	return;
}

<div class="mt-5 mb-5"></div>

<span class="font-md font-gray">Series</span>
<h1>@Title.Name</h1>

<div class="d-flex flex-wrap mt-3">
	<div class="font-gray col-md-6 overflow-hidden">@Title.Description</div>
	<div class="d-none d-md-block col-md-6"></div>
</div>

<div class="mt-4 d-flex">
	<a href="/titles/@Title.Slug#player" class="button-md button font-lg font-white mx-2">Watch <i class="mx-2 bi bi-play-fill"></i></a>
	<a href="/titles/@Title.Slug" class="button-md button-glass font-lg font-white mx-2 back-dark">Info <i class="mx-2 bi bi-info-circle-fill"></i></a>
</div>

<div class="mt-5 mb-5"></div>

<div class="mt-3">
	<Slider Header="Recomendations" Titles="Recomendations"/>
</div>

@foreach (var byGenreRecomedations in GenresRecomedations)
{
	<div class="mt-3">
		<Slider Header="@byGenreRecomedations.Key" Titles="@byGenreRecomedations.Value" />
	</div>
}

@code {
	public Title Title { get; set; } = new()
		{
			Id = Guid.NewGuid(),
			Trailer = string.Empty,
			Name = "Гра в кальмара",
			Description = "47-річний Сон Гі-Хун, залежний від азартних ігор, живе на доходи своєї хворої матері. Через його пристрасть до азартних ігор і невимушене ставлення до грошей він опинився у фінансовій ямі, і не може отримати опіку над своєю донькою Га-Єн. Коли кредитори погрожують Сону фізичною розправою, якщо чоловік не поверне гроші до кінця місяця, загадковий незнайомець пропонує йому взяти участь у секретній грі на виживання. 456 учасникам доведеться вести боротьбу за солідний грошовий приз, граючи в дитячі ігри...",
			Slug = "squid-game",
			ReleaseDate = DateTime.Now,
			Director = string.Empty,
			Type = TitleType.Film,
			Country = Country.KR,
			Cast = string.Empty,
			Views = 1000,
			AvarageRate = 9.9f,
			AgeRestriction = AgeRestriction.AdultsOnly,
			Image = new Image { Uri = "" },

		};

	public List<Title> Recomendations { get; set; } = new();

	public List<string> GenresForRecomendation { get; set; } = ["Family", "Comedy", "Action", "Fantasy", "Adventure"];

	public Dictionary<string, List<Title>> GenresRecomedations { get; set; } = new();

	private bool Loaded { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		var recomendationsResult = await TitleService.FindAllPopularAsync();

		if (recomendationsResult.IsFound)
		{
			Recomendations = recomendationsResult.AsFound;
			Title = Recomendations.First();
		}

		foreach (var genre in GenresForRecomendation)
		{
			var recomendationsByGenreResult = await TitleService.FindAllByGenreAsync(genre);

			if (recomendationsByGenreResult.IsFound)
			{
				GenresRecomedations.Add(genre, recomendationsByGenreResult.AsFound);
			}
		}

		Loaded = true;
		StateHasChanged();
	}
}