@attribute [Route(WebRoutes.Home)]
@using Domain.Entities
@using Domain.Models.Results.Unions

@inject IIdentityService IdentityService
@inject ITitleService TitleService

<PageTitle>Home</PageTitle>
<Background Blur="0" Url="@Title.Image?.Uri" />

@if (Loaded is false)
{
	<div class="sm-page-container">
		<Loading />
	</div>
	<LargeMargin />
	return;
}

<div class="responsive-margin-top"></div>

<span class="font-md font-gray">Series</span>
<h1>@Title.Name</h1>

<div class="d-flex flex-wrap mt-3">
	<div class="font-gray col-md-6 overflow-hidden">@Title.Description</div>
	<div class="d-none d-md-block col-md-6"></div>
</div>

<div class="mt-4 row">
	<div class="col-sm-5 col-md-4 col-lg-3">
		<a href="@WebRoutes.Titles.Base/@Title.Slug#player" class="button font-lg font-white">
			Watch <i class="mx-2 bi bi-play-fill"></i>
		</a>
	</div>
	<div class="col-sm-5 col-md-4 col-lg-3 mt-3 mt-sm-0">
		<a href="@WebRoutes.Titles.Base/@Title.Slug" class="button-dark font-lg font-white">
			Info <i class="mx-2 bi bi-info-circle-fill"></i>
		</a>
	</div>
</div>

<div style="height: 60px"></div>

<div class="mt-4">
	<Slider Header="Recomendations" Titles="Recomendations" />
</div>

@foreach (var byGenreRecomedations in GenresRecomedations)
{
	<div class="mt-4">
		<Slider Header="@byGenreRecomedations.Key" Titles="@byGenreRecomedations.Value" />
	</div>
}

<div class="m-5"></div>

@code {
	public Title Title { get; set; } = new()
		{
			Id = Guid.NewGuid(),
			Trailer = string.Empty,
			Name = string.Empty,
			Description = string.Empty,
			Slug = string.Empty,
			ReleaseDate = DateTime.Now,
			Director = string.Empty,
			Type = TitleType.Film,
			Country = Country.KR,
			Cast = string.Empty,
			Views = 1000,
			AvarageRate = 9.9f,
			AgeRestriction = AgeRestriction.AdultsOnly,
			Image = new Image { Uri = "" },

		};

	public List<Title> Recomendations { get; set; } = new();

	public List<string> GenresForRecomendation { get; set; } = ["Family", "Comedy", "Action", "Fantasy", "Adventure"];

	public Dictionary<string, List<Title>> GenresRecomedations { get; set; } = new();

	private bool Loaded { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		var favouriteGenresResult = await IdentityService.GetFavouriteGenresAsync();

		if (favouriteGenresResult.IsFound)
		{
			var genres = favouriteGenresResult
				.AsFound;

			if (genres.Count > 0)
			{
				GenresForRecomendation = genres
					.Take(10)
					.Select(x => x.Name)
					.ToList();
			}
		}

		var recomendationsResult = await TitleService.FindAllPopularAsync();

		if (recomendationsResult.IsFound)
		{
			Recomendations = recomendationsResult.AsFound;
			Title = Recomendations.First();
		}

		Dictionary<string, Task<GetAllResult<Title>>> tasks = [];

		foreach (var genre in GenresForRecomendation)
		{
			tasks.Add(genre, TitleService.FindAllByGenreAsync(genre));
		}

		await Task.WhenAll(tasks.Values);

		foreach (var (genre, task) in tasks)
		{
			if (task.Result.IsFound)
			{
				GenresRecomedations.Add(genre, task.Result.AsFound);
			}
		}

		Loaded = true;
		StateHasChanged();
	}
}