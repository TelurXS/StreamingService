@attribute [Route(WebRoutes.TitlesLists.ById)]
@layout ProfileLayout

@using Domain.Entities
@using Microsoft.AspNetCore.Components.WebAssembly.Hosting
@using NetcodeHub.Packages.Extensions.Clipboard

@inject IIdentityService IdentityService
@inject ClipboardService ClipboardService
@inject ITitlesListService TitlesListService
@inject IWebAssemblyHostEnvironment Enviroment

<RequireAuthorization />

@if (Loaded is false)
{
	<div class="sm-page-container">
		<Loading />
	</div>
	<LargeMargin />
	return;
}

<Glow Size="50" Top="200px" Blur="100" Left="calc(80% - 100px)" ShadowColor="var(--primary)" ZIndex="1" />
<Glow Size="50" Top="900px" Blur="100" Left="calc(80% - 100px)" ShadowColor="var(--primary)" ZIndex="1" />
<Glow Size="50" Top="600px" Blur="100" Left="calc(20% - 100px)" ShadowColor="var(--primary)" ZIndex="1" />

<div class="mb-3 d-flex align-items-center">

	<class class="font-xl">Saved</class>

	@if (IsAuthorView)
	{
		@if (List.Availability is Availability.Public)
		{
			<img @onclick="() => Window.Open()" height="25" src="/img/unlock.svg" class="mx-3" style="opacity: 0.3" />
		}
		else
		{
			<img @onclick="() => Window.Open()" height="25" src="/img/lock.svg" class="mx-3" style="opacity: 0.3" />
		}
	}
	else
	{
		@if (List.Availability is Availability.Public)
		{
			<img height="25" src="/img/unlock.svg" class="mx-3" style="opacity: 0.3" />
		}
		else
		{
			<img height="25" src="/img/lock.svg" class="mx-3" style="opacity: 0.3" />
		}
	}

	<span class="font-md font-gray">@List.Name</span>

	<button @onclick='async () => await ClipboardService.CopyAsync($"{Enviroment.GetHostName()}{WebRoutes.TitlesLists.Base}/{Id}")'
			class="button-glass button-fit px-2 mx-1"><i class="bi bi-copy"></i></button>
</div>

@if (IsAuthorView is false && List.Availability is Availability.Private)
{
	<div class="d-flex flex-column justify-content-center align-items-center">
		<img class="w-25" src="/img/lock.svg" />
		<span class="font-lg font-gray">You don't have access to this list</span>
	</div>
	return;
}

<div class="row row-cols-2 row-cols-md-4 row-cols-lg-5 position-relative">
	@foreach (var title in List.Titles)
	{
		<div class="col d-flex justify-content-center mt-2">
			<ResponsiveTitleCard Title="title" />
		</div>
	}
</div>

<TitlesListSettingsModalWindow @ref="Window" List="List" OnSettingsChanged="OnSettingsChanged" />

@code {

	[Parameter]
	public string Id { get; set; } = string.Empty;

	private TitlesList List { get; set; } = default!;

	private bool Loaded { get; set; } = false;

	private bool IsAuthorView { get; set; } = false;

	private TitlesListSettingsModalWindow Window { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{
		if (Guid.TryParse(Id, out var id) is false)
			return;

		var titlesListResult = await TitlesListService.GetById(id);

		if (titlesListResult.IsFound)
		{
			List = titlesListResult.AsFound;
		}

		var titlesListsResult = await IdentityService.GetTitlesListsAsync();

		if (titlesListsResult.IsFound)
		{
			IsAuthorView = titlesListsResult.AsFound.Any(x => x.Id == List.Id);
		}

		Loaded = true;
		StateHasChanged();
	}

	private void OnSettingsChanged(TitlesList list)
	{
		StateHasChanged();
	}
}