@attribute [Route(WebRoutes.ResetCodeSent)]
@layout MinimalisticLayout

@using Domain.Entities

@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager

@if (Loaded is false)
{
	<div class="sm-page-container">
		<Loading />
	</div>
	<LargeMargin />
	return;
}

<div class="gradient-panel card-form form-shadow-primary p-4">

	<h2 class="mb-2">Reset Code</h2>

	@if (Success)
	{
		<span class="mt-2">Reset Code sent to your email</span>

		<a @onclick="() => OnClick()" class=" mt-3 button font-white">Continue</a>
	}

	@if (Error)
	{
		<span class="mt-2">Something went wrong...</span>

		<a @onclick="() => OnClick()" class="mt-3 button font-white">Return</a>
	}
</div>

@code {

	[SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; } = default;

	private User User { get; set; } = default!;

	private bool Loaded { get; set; } = false;

	private bool Success { get; set; } = false;
	private bool Error { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		var userResult = await IdentityService.GetProfileAsync();

		if (userResult.IsFound)
		{
			User = userResult.AsFound;
		}
		else
		{
			Error = true;
			Loaded = true;
			StateHasChanged();
			return;
		}

		var sentResult = await IdentityService.ForgotPassword(User.Email ?? string.Empty);

		if (sentResult.IsUpdated)
		{
			Success = true;
		}
		else
		{
			Error = true;
		}

		Loaded = true;
		StateHasChanged();
	}

	private void OnClick()
	{
		if (ReturnUrl is not null)
		{
			NavigationManager.NavigateTo(ReturnUrl);
			return;
		}

		NavigationManager.NavigateTo(WebRoutes.Home);
	}
}