@attribute [Route(WebRoutes.ResetPassword)]
@layout MinimalisticLayout

@using Domain.Entities
@using FluentValidation.Results

@inject IIdentityService IdentityService
@inject NavigationManager NavigationManager

<div class="gradient-panel card-form form-shadow-primary p-4">

	<h2 class="mb-2">Reset Password</h2>

	@if (Success is false)
	{
		if (Errors.Any())
		{
			<ul>
				@foreach (var error in Errors)
				{
					<li class="validation-message">@error.ErrorMessage</li>
				}
			</ul>
		}

		<EditForm Model="Input" OnValidSubmit="OnSubmit" OnInvalidSubmit="OnInvalidSubmit">
			<DataAnnotationsValidator />
			<ValidationSummary />

			<InputText @bind-Value="Input.Password" class="mt-3 input font-gray" placeholder="New Password..." />

			<InputText @bind-Value="Input.ConfirmPassword" class="mt-3 input font-gray" placeholder="Confirm Password..." />

			<button class="mt-3 button">Submit</button>

		</EditForm>
	}

	@if (Success)
	{
		<span class="mt-2">You password successfully changed</span>

		<a @onclick="() => OnClick()" class=" mt-3 button font-white">Continue</a>
	}
</div>

@code {

	[SupplyParameterFromQuery]
	public string? ReturnUrl { get; set; } = default;

	[SupplyParameterFromQuery]
	public string Code { get; set; } = string.Empty;

	[SupplyParameterFromQuery]
	public string Email { get; set; } = string.Empty;

	private InputModel Input { get; set; } = new();

	private List<ValidationFailure> Errors { get; set; } = new();

	private bool Success { get; set; } = false;

	private async Task OnSubmit()
	{
		Success = false;

		var request = new ResetPasswordRequest
			{
				Email = Email,
				NewPassword = Input.Password,
				ResetCode = Code,
			};

		var sentResult = await IdentityService.ResetPassword(request);

		if (sentResult.IsUpdated)
		{
			Success = true;
		}

		if (sentResult.IsValidationFailed)
		{
			Errors = sentResult.AsValidationFailed.Errors.ToList();
		}

		StateHasChanged();
	}

	private async Task OnInvalidSubmit()
	{
		Errors.Clear();
		StateHasChanged();
	}

	private void OnClick()
	{
		if (ReturnUrl is not null)
		{
			NavigationManager.NavigateTo(ReturnUrl);
			return;
		}

		NavigationManager.NavigateTo(WebRoutes.Home);
	}

	private class InputModel
	{
		[Required]
		public string Password { get; set; } = string.Empty;

		[Required]
		[Compare(nameof(Password))]
		public string ConfirmPassword { get; set; } = string.Empty;
	}
}