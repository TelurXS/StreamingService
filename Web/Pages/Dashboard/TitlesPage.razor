@attribute [Route(WebRoutes.Dashboard.Titles)]
@layout DashboardLayout
@using Domain.Entities
@using Domain.Extensions

@inject ITitleService TitleService
@inject NavigationManager NavigationManager

<RequireRole Role="@Role.Admin" />

<div style="min-height: 90vh">

    <div class="row">

        <div class="col-md-8">
            <div class="d-flex">
                <InputText class="input-underline"
                           placeholder="Search..."
                           Value="@Search"
                           ValueExpression="() => Search"
                           ValueChanged="(value) => OnSearchChanged(value)" />

                <button class="btn" type="reset" @onclick="() => OnSearchChanged(string.Empty)">
                    <i class="bi bi-x-lg"></i>
                </button>
            </div>
        </div>

        <div class="col-md-2 mt-3 mt-md-0">
            <button class="button-glass" @onclick="() => CreateWindow.Open()">
                <i class="bi bi-plus-lg"></i>
                <span class=" mx-1">Create</span>
            </button>
        </div>

        <div class="col-md-2 mt-3 mt-md-0">
            <CountSelect />
        </div>

    </div>

    <table class="mt-3 table table-dark table-hover table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Name</th>
                <th>Slug</th>
                <th>AvarageRate</th>
                <th>Type</th>
                <th>Country</th>
                <th>AgeRestriction</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var title in Titles)
            {
                <tr @onclick="() => UpdateWindow.Open(title.Id)">
                    <td>@title.Id</td>
                    <td>@title.Name</td>
                    <td>@title.Slug</td>
                    <td>@title.AvarageRate</td>
                    <td>@title.Type.GetDescription()</td>
                    <td>@title.Country.GetDescription()</td>
                    <td>@title.AgeRestriction.GetDescription()</td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination @ref="Pagination"
                Url="@WebRoutes.Dashboard.Titles"
                RefreshCallback="Refresh"
                DefaultCount="10"
                DefaultPage="0"
                Query='() => $"search={Search}"'
                TotalPages="TotalPages"
                TotalCount="TotalCount" />
</div>

<UpdateTitleModalWindow @ref="UpdateWindow" OnChanged="OnUpdated" />
<CreateTitleModalWindow @ref="CreateWindow" OnChanged="OnUpdated" />

@code {

    [SupplyParameterFromQuery]
    private string Search { get; set; } = string.Empty;

    private List<Title> Titles { get; set; } = new();

    private int TotalCount { get; set; } = 0;

    private int TotalPages { get; set; } = 0;

    private UpdateTitleModalWindow UpdateWindow { get; set; } = default!;
    private CreateTitleModalWindow CreateWindow { get; set; } = default!;

    private Pagination Pagination { get; set; } = default!;

    private async Task Refresh(int page, int count)
    {
        @if (string.IsNullOrEmpty(Search))
        {
            var titlesResult = await TitleService.FindAllAsync(count, page);

            if (titlesResult.IsFound)
            {
                Titles = titlesResult.AsFound;
            }

            TotalCount = await TitleService.CountAsync();
            TotalPages = Pagination.CalculatePageCount(TotalCount, count);
        }
        else
        {
            var titlesResult = await TitleService.FindAllByNameAsync(Search, count, page);

            if (titlesResult.IsFound)
            {
                Titles = titlesResult.AsFound;
            }

            TotalCount = await TitleService.CountByNameAsync(Search);
            TotalPages = Pagination.CalculatePageCount(TotalCount, count);
        }

        StateHasChanged();
    }

    private async Task OnUpdated()
    {
        await Pagination.Refresh();
        StateHasChanged();
    }

    private async Task OnSearchChanged(string value)
    {
        Search = value;
        await Pagination.ResetPage();
        StateHasChanged();
    }
}