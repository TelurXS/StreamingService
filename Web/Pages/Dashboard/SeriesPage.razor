@attribute [Route(WebRoutes.Dashboard.Series)]
@layout DashboardLayout
@using Domain.Entities
@using Domain.Extensions

@inject ISeriesService SeriesService
@inject ITitleService TitleService
@inject NavigationManager NavigationManager

<RequireRole Role="@Role.Admin" />

<div style="min-height: 90vh">

	<div class="row">

		<div class="col-md-8">
			<div class="d-flex">
				<InputText class="input-underline"
						   placeholder="Search..."
						   Value="@Search"
						   ValueExpression="() => Search"
						   ValueChanged="(value) => OnSearchChanged(value)" />

				<button class="btn" type="reset" @onclick="() => OnSearchChanged(string.Empty)">
					<i class="bi bi-x-lg"></i>
				</button>
			</div>
		</div>

		<div class="col-md-2 mt-3 mt-md-0">
			<button class="button-glass" @onclick="() => CreateWindow.Open()">
				<i class="bi bi-plus-lg"></i>
				<span class=" mx-1">Create</span>
			</button>
		</div>

		<div class="col-md-2 mt-3 mt-md-0">
			<CountSelect />
		</div>

	</div>

	<table class="mt-3 table table-dark table-hover table-striped">
		<thead>
			<tr>
				<th>Id</th>
				<th>Name</th>
				<th>Uri</th>
				<th>Dubbing</th>
				<th>Language</th>
				<th>Index</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var series in Series)
			{
				<tr @onclick="() => UpdateWindow.Open(series.Id)">
					<td>@series.Id</td>
					<td>@series.Name</td>
					<td>@series.Uri</td>
					<td>@series.Dubbing</td>
					<td>@series.Language</td>
					<td>@series.Index</td>
				</tr>
			}
		</tbody>
	</table>

	<Pagination @ref="Pagination"
				Url="@WebRoutes.Dashboard.Series"
				RefreshCallback="Refresh"
				DefaultCount="10"
				DefaultPage="0"
				Query='() => $"search={Search}"'
				TotalPages="TotalPages"
				TotalCount="TotalCount" />

</div>

<UpdateSeriesModalWindow @ref="UpdateWindow" OnChanged="OnUpdated" />
<CreateSeriesModalWindow @ref="CreateWindow" OnChanged="OnUpdated" />

@code {

	[SupplyParameterFromQuery]
	private string Search { get; set; } = string.Empty;

	private List<Series> Series { get; set; } = new();

	private int TotalCount { get; set; } = 0;

	private int TotalPages { get; set; } = 0;

	private UpdateSeriesModalWindow UpdateWindow { get; set; } = default!;
	private CreateSeriesModalWindow CreateWindow { get; set; } = default!;

	private Pagination Pagination { get; set; } = default!;

	private async Task Refresh(int page, int count)
	{
		if (string.IsNullOrEmpty(Search))
		{
			var seriesResult = await SeriesService.FindAllAsync(count, page);

			if (seriesResult.IsFound)
			{
				Series = seriesResult.AsFound;
			}

			TotalCount = await SeriesService.CountAsync();
			TotalPages = Pagination.CalculatePageCount(TotalCount, count);
		}
		else
		{
			if (Guid.TryParse(Search, out Guid id) is false)
			{
				Series = [];
				TotalCount = 0;
				TotalPages = 0;
				StateHasChanged();
				return;
			}

			var titleResult = await TitleService.FindByIdAsync(id);

			if (titleResult.IsFound)
			{
				Series = titleResult
					.AsFound
					.Series
					.Skip(count * page)
					.Take(count)
					.ToList();

				TotalCount = titleResult
					.AsFound
					.Series
					.Count;

				TotalPages = Pagination.CalculatePageCount(TotalCount, count);
			}
		}

		StateHasChanged();
	}

	private async Task OnUpdated()
	{
		await Pagination.Refresh();
		StateHasChanged();
	}

	private async Task OnSearchChanged(string value)
	{
		Search = value;
		await Pagination.ResetPage();
		StateHasChanged();
	}
}