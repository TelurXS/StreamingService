@attribute [Route(WebRoutes.My.Notifications)]
@layout ProfileLayout

@using Domain.Entities

@inject IIdentityService IdentityService

<RequireAuthorization />

<h2 class="mb-3">Notifications</h2>

@{
	var notSnoozedNotifications = Notifications
					.Where(x => x.Snoozed is false)
					.OrderByDescending(x => x.Date)
					.ToList();

	if (notSnoozedNotifications.Count > 0)
	{
		<span class="mt-3 mb-3 font-xl">New</span>

		<div class="d-flex flex-column">

			@foreach (var notification in notSnoozedNotifications)
			{
				<ModularNotification Notification="notification" />
			}

		</div>

		<div class="gradient-divider mt-3 mb-3"></div>
	}
}

<div class="d-flex flex-column">
	@foreach (var notification in Notifications
			.Where(x => x.Snoozed)
			.OrderByDescending(x => x.Date))
	{
		<ModularNotification Notification="notification" />
	}
</div>

@code {
	private List<Notification> Notifications { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		var notificationsResult = await IdentityService.GetNotificationsAsync();

		if (notificationsResult.IsFound)
		{
			Notifications = notificationsResult.AsFound;
			StateHasChanged();
		}

		var snoozeResult = await IdentityService.SnoozeNotificationsAsync();
	}
}