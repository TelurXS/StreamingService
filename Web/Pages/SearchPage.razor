@attribute [Route(WebRoutes.Search)]

@using Domain.Entities
@using Domain.Models.Results.Unions

@inject ITitleService TitleService
@inject NavigationManager NavigationManager

<PageTitle>New & Popular</PageTitle>

@if (Loaded is false)
{
	<div class="sm-page-container">
		<Loading />
	</div>
	<LargeMargin />
}

@if (Loaded && Titles.Count == 0)
{
	<div class="sm-page-container">
		<NotFound />
	</div>
	<LargeMargin />
	return;
}

<div style="min-height: 90vh">

	<div class="d-flex flex-wrap">
		@if (Titles.Count > 0)
		{
			<span class="font-md font-gray">You can also search for:</span>

			@foreach (var title in Titles.Take(10))
			{
				<a @onclick='() => NavigationManager.NavigateTo($"{WebRoutes.Search}?searchName={title.Name}", true)' class="mx-2 font-white">@title.Name</a>
				<span class="mx-1">|</span>
			}
		}
	</div>

	<div class="row mt-3 row-cols-2 row-cols-md-3 row-cols-lg-4 row-cols-xl-5">
		@foreach (var title in Titles)
		{
			<div class="col d-flex justify-content-center mt-3">
				<ResponsiveTitleCard Title="title" />
			</div>
		}
	</div>

	<div class="mt-3">

		<Pagination @ref="Pagination"
					Url="@WebRoutes.Search"
					RefreshCallback="Refresh"
					Query='() => $"searchName={SearchName}"'
					TotalCount="TotalCount"
					TotalPages="TotalPages"
					DefaultCount="40" />

	</div>

</div>

@code {

	[SupplyParameterFromQuery]
	public string SearchName { get; set; } = string.Empty;

	public List<Title> Titles { get; set; } = new();

	public int TotalCount { get; set; } = 0;

	public int TotalPages { get; set; } = 0;

	private bool Loaded { get; set; } = false;

	private Pagination Pagination { get; set; } = default!;


	private async Task Refresh(int page, int count)
	{
		Loaded = false;

		var recomendationsResult = await TitleService.FindAllByNameAsync(SearchName, count, page);

		if (recomendationsResult.IsFound)
		{
			Titles = recomendationsResult.AsFound;
		}

		TotalCount = await TitleService.CountByNameAsync(SearchName);
		TotalPages = Pagination.CalculatePageCount(TotalCount, count);

		Loaded = true;
		StateHasChanged();
	}
}
