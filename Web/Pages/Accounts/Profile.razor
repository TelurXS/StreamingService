@attribute [Route(WebRoutes.My.Profile.MyProfile)]
@layout ProfileLayout

@using Domain.Entities

@inject IIdentityService IdentityService

<RequireAuthorization />

@if (Loaded is false)
{
	<div>Loading...</div>
	return;
}

<div class="row">
	<div class="col-md-6">
		<div class="row">

			<div class="col-sm-5 col-md-3">
				<div class="circle-profile-picture" 
					style="background-image: url('https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png');" />
			</div>

			<div class="col-sm-7 col-md-9 d-flex flex-column">
				<span class="font-xl d-flex align-items-center">
					@User.Name 
					<a href="@WebRoutes.Manage.Profile?returnUrl=/profile" class="button button-fit mx-2 p-1">
						<img style="width: 15px" src="/img/pencil.svg" />
					</a>
				</span>
				<span class="font-md mt-1">@User.FirstName @User.SecondName</span>
				<span class="font-sm mt-2 font-gray">Favourite Genres:</span>
				<div class="d-flex flex-wrap align-items-center">
					@foreach (var genre in Genres)
					{
						<span class="button button-fit font-xs m-1 px-2 py-1">@genre</span>
					}
					<a href="@WebRoutes.Manage.Genres?returnUrl=/profile" class="button button-fit mx-2 p-1">
						<img style="width: 15px" src="/img/pencil.svg" />
					</a>
				</div>
			</div>

		</div>
	</div>
	<div class="col-md-6">
		<div class="row">

			<div class="col-md-8 d-flex mt-2 mt-md-0">
				<div class="info-card">
					<span class="font-md">5</span>
					<span class="font-sm font-gray">Readers</span>
				</div>
				<div class="info-card">
					<span class="font-md">10</span>
					<span class="font-sm font-gray">Folowers</span>
				</div>
				<div class="info-card">
					<span class="font-md">@FavouriteTitles.Count</span>
					<span class="font-sm font-gray">Favourite</span>
				</div>
			</div>

			<div class="col-md-4"></div>

			<div class="col-md-12 mt-2">
				<div class="row">

					<div class="col-md-6 d-flex overflow-hidden mt-2 mt-md-0">
						@foreach (var i in Enumerable.Range(0, ViewRecords.Count))
						{
							<MiniTitleCard Title="ViewRecords[i].Title" Shift="@(i * -10)" Index="@(5 - i)" />
						}
					</div>

					<div class="col-md-6 mt-2 mt-md-0">

						@if (LastWatched is not null)
						{
							<a class="d-flex" href="@WebRoutes.Titles.Base/@LastWatched.Title.Slug?seriesId=@LastWatched.Series.Id&progress=@((int)(LastWatched.Progress * 100))">
								<div style="pointer-events: none;">
									<MiniTitleCard Title="LastWatched.Title" />
								</div>

								<div class="d-flex w-100 px-3 flex-column">
									<span class="font-xs font-gray">Latest Watched:</span>
									<span class="font-md">@LastWatched.Title.Name</span>
									<span class="font-sm">@LastWatched.Series.Name</span>
									<progress class="mt-2" min="0" max="100" value="@((int)(LastWatched.Progress * 100))"></progress>
								</div>
							</a>
						}
						
					</div>

				</div>
			</div>

		</div>
	</div>

	<div class="gradient-divider mt-1"></div>
</div>

<div class="row mt-4">
	<div class="col-lg-6 mt-2 mt-md-0 h-100">
		<a href="@WebRoutes.My.Profile.Favourites">
			<h4>Favourite</h4>

			<div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 p-3 profile-content-background">
				@foreach (var title in FavouriteTitles)
				{
					<div class="col mt-2 px-1">
						<ResponsiveTitleCard Title="title" />
					</div>
				}
			</div>
		</a>
	</div>

	<div class="col-lg-6 mt-2 mt-md-0">
		<h4>Lists</h4>

		<div class="row row-cols-4 p-3 profile-content-background">

		</div>
	</div>
</div>

@code {

	private User User { get; set; } = default!;

	private List<string> Genres { get; set; } = [];

	private bool Loaded { get; set; } = false;

	private List<Title> FavouriteTitles { get; set; } = new();

	private List<ViewRecord> ViewRecords { get; set; } = new();

	private ViewRecord? LastWatched { get; set; } = default;

	protected override async Task OnInitializedAsync()
	{
		var userResult = await IdentityService.GetProfileAsync();

		if (userResult.IsFound)
		{
			User = userResult.AsFound;
		}

		var genresResult = await IdentityService.GetFavouriteGenresAsync();

		if (genresResult.IsFound)
		{
			Genres = genresResult.AsFound.Select(x => x.Name).ToList();
		}

		var favouriteTitlesResult = await IdentityService.GetFavouriteTitlesAsync();

		if (favouriteTitlesResult.IsFound)
		{
			FavouriteTitles = favouriteTitlesResult.AsFound;
		}

		var viewRecordsResult = await IdentityService.GetViewRecordsAsync();

		if (viewRecordsResult.IsFound)
		{
			LastWatched = viewRecordsResult.AsFound.LastOrDefault();
			ViewRecords = viewRecordsResult.AsFound.DistinctBy(x => x.Title.Id).ToList();
		}

		Loaded = true;
		StateHasChanged();
	}
}